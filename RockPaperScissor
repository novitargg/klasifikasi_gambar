{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "PROYEK AKHIR: KLASIFIKASI GAMBAR MENGGUNAKAN CNN\n",
        "\n",
        "Nama: Novita Rajagukguk\n",
        "username: novita_rajagukguk"
      ],
      "metadata": {
        "id": "hMEozyz41lbG"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AATzcBWpGuyG"
      },
      "source": [
        "import tensorflow as tf"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DRSrhuatHGi-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4d1ecbe0-8553-4d7a-aef4-840cb0b875aa"
      },
      "source": [
        "!wget --no-check-certificate https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip -O /tmp/rockpaperscissors.zip"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2023-11-21 18:58:34--  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip\n",
            "Resolving github.com (github.com)... 140.82.113.4\n",
            "Connecting to github.com (github.com)|140.82.113.4|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://objects.githubusercontent.com/github-production-release-asset-2e65be/391417272/7eb836f2-695b-4a46-9c78-b65867166957?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20231121%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20231121T185834Z&X-Amz-Expires=300&X-Amz-Signature=959fc80ef4c959d7ef5fdd4c5c2ae121c77f1588448a0670e2ea073055a29699&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=391417272&response-content-disposition=attachment%3B%20filename%3Drockpaperscissors.zip&response-content-type=application%2Foctet-stream [following]\n",
            "--2023-11-21 18:58:34--  https://objects.githubusercontent.com/github-production-release-asset-2e65be/391417272/7eb836f2-695b-4a46-9c78-b65867166957?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20231121%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20231121T185834Z&X-Amz-Expires=300&X-Amz-Signature=959fc80ef4c959d7ef5fdd4c5c2ae121c77f1588448a0670e2ea073055a29699&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=391417272&response-content-disposition=attachment%3B%20filename%3Drockpaperscissors.zip&response-content-type=application%2Foctet-stream\n",
            "Resolving objects.githubusercontent.com (objects.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n",
            "Connecting to objects.githubusercontent.com (objects.githubusercontent.com)|185.199.108.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 322873683 (308M) [application/octet-stream]\n",
            "Saving to: ‘/tmp/rockpaperscissors.zip’\n",
            "\n",
            "/tmp/rockpapersciss 100%[===================>] 307.92M   331MB/s    in 0.9s    \n",
            "\n",
            "2023-11-21 18:58:35 (331 MB/s) - ‘/tmp/rockpaperscissors.zip’ saved [322873683/322873683]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RTBu2oJfHIbH"
      },
      "source": [
        "# melakukan ekstraksi pada file zip\n",
        "import zipfile, os\n",
        "\n",
        "local_zip='/tmp/rockpaperscissors.zip'\n",
        "zip_ref= zipfile.ZipFile(local_zip,'r')\n",
        "zip_ref.extractall('/tmp')\n",
        "zip_ref.close()"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "! pip install split-folders"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cVgMnxSKJ4cD",
        "outputId": "14bd33d5-bc02-4c9d-e517-b9853caf13e9"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting split-folders\n",
            "  Downloading split_folders-0.5.1-py3-none-any.whl (8.4 kB)\n",
            "Installing collected packages: split-folders\n",
            "Successfully installed split-folders-0.5.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#menentukan path untuk direktori\n",
        "import splitfolders\n",
        "base_dir='/tmp/rockpaperscissors/rps-cv-images'\n",
        "splitfolders.ratio(base_dir, output=base_dir, seed=1337, ratio=(.6, .4))\n",
        "train_dir= os.path.join(base_dir,'train')\n",
        "validation_dir=os.path.join(base_dir, 'val')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OZXN7oHbKdOi",
        "outputId": "4fc64835-28d4-462a-b068-79dfb298dd62"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Copying files: 2188 files [00:00, 5011.02 files/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CIbS5WB-HOhC"
      },
      "source": [
        "# membuat direktori paper, scissor, rock pada direktori train_dir\n",
        "train_paper_dir = os.path.join(train_dir, 'paper')\n",
        "train_scissors_dir = os.path.join(train_dir,'scissors')\n",
        "train_rock_dir = os.path.join(train_dir,'rock')\n",
        "\n",
        "# membuat direktori paper, scissor, rock pada direktori validation_dir\n",
        "validation_paper_dir= os.path.join(validation_dir,'paper')\n",
        "validation_scissors_dir = os.path.join(validation_dir,'scissors')\n",
        "validation_rock_dir = os.path.join(validation_dir, 'rock')"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(os.listdir(train_dir))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fGkEK7uENeJZ",
        "outputId": "e7d77143-be98-40a1-9685-0e76f0215a9f"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['scissors', 'paper', 'rock']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dKIS8oM6HMwv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "182e0174-c5b9-4339-e8fa-1791aadf30f5"
      },
      "source": [
        "print(os.listdir(validation_dir))"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['scissors', 'paper', 'rock']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6-lp90PCHQRZ"
      },
      "source": [
        "#Melakukan augmentasi gambar\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "train_datagen = ImageDataGenerator(\n",
        "    rotation_range= 40, #memutar gambar dengan sudut 40\n",
        "    width_shift_range=0.2, #pergeseran horizontal secara acak sebesar 20% dari tootal lebar total gambar\n",
        "    height_shift_range=0.2, #pergeseran vertikal secara acak sebesar 20% dari total tinggi gambar\n",
        "    shear_range=0.2, #melakukan pergesaran shear secara acak\n",
        "    zoom_range=0.2, #memperbesar/memperkecil gambar\n",
        "    rescale=1./255, #mengubah rentang piksel menjadi 0-1\n",
        "    horizontal_flip=True, #memastikan adanya pemutaran gambar secara horizontal\n",
        "    fill_mode='nearest', #mengisi piksel yang kosong dengan nilai piksel terdekat\n",
        ")\n",
        "\n",
        "validation_datagen = ImageDataGenerator(\n",
        "    rescale=1./255\n",
        ")"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5jZFBH10HSI_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "576567fc-e233-47b6-cc6b-7c310dd317a9"
      },
      "source": [
        "train_generator = train_datagen.flow_from_directory(\n",
        "        train_dir,  # direktori data latih\n",
        "        target_size=(150, 150),  # mengubah resolusi seluruh gambar menjadi 150x150 piksel\n",
        "        batch_size=4, #menentukan jumlah sampel gambar  yaitu 4 pada setiap iterasi pelatihan/evaluasi\n",
        "        # karena ini merupakan masalah klasifikasi 3 kelas maka menggunakan class_mode = 'categorical'\n",
        "        class_mode='categorical')\n",
        "\n",
        "validation_generator = validation_datagen.flow_from_directory(\n",
        "        validation_dir,\n",
        "        target_size=(150, 150),\n",
        "        batch_size=4,\n",
        "        class_mode='categorical')"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 1312 images belonging to 3 classes.\n",
            "Found 876 images belonging to 3 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tJ_KwTQJHT-U"
      },
      "source": [
        "model = tf.keras.models.Sequential([\n",
        "    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),\n",
        "    tf.keras.layers.MaxPooling2D(2, 2),\n",
        "    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n",
        "    tf.keras.layers.MaxPooling2D(2,2),\n",
        "    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n",
        "    tf.keras.layers.MaxPooling2D(2,2),\n",
        "    tf.keras.layers.Conv2D(512, (3,3), activation='relu'),\n",
        "    tf.keras.layers.MaxPooling2D(2,2),\n",
        "    tf.keras.layers.Flatten(),\n",
        "    tf.keras.layers.Dropout(0.5),\n",
        "    tf.keras.layers.Dense(512, activation='relu'),\n",
        "    tf.keras.layers.Dense(3, activation='softmax')\n",
        "])"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sgB1dDJ1KypF",
        "outputId": "9b5a3926-23c1-4fa4-f0ce-a4beab9fa19a"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 148, 148, 32)      896       \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2  (None, 74, 74, 32)        0         \n",
            " D)                                                              \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 72, 72, 64)        18496     \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPoolin  (None, 36, 36, 64)        0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " conv2d_2 (Conv2D)           (None, 34, 34, 128)       73856     \n",
            "                                                                 \n",
            " max_pooling2d_2 (MaxPoolin  (None, 17, 17, 128)       0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " conv2d_3 (Conv2D)           (None, 15, 15, 512)       590336    \n",
            "                                                                 \n",
            " max_pooling2d_3 (MaxPoolin  (None, 7, 7, 512)         0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 25088)             0         \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 25088)             0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 512)               12845568  \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 3)                 1539      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 13530691 (51.62 MB)\n",
            "Trainable params: 13530691 (51.62 MB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mbvLD0cVHXJ6"
      },
      "source": [
        "from tensorflow.keras.optimizers import SGD\n",
        "#optimizer= SGD(learning_rate=0.001, momentum=0.9)\n",
        "model.compile(optimizer='adam',\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy'])"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VVmUsHpzHX3w",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a868e2a9-0e08-44c9-c473-e29454848f27"
      },
      "source": [
        "history = model.fit(\n",
        "      train_generator,\n",
        "      steps_per_epoch=25,\n",
        "      epochs=30,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=5,\n",
        "      verbose=2)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/30\n",
            "25/25 - 3s - loss: 1.5402 - accuracy: 0.4700 - val_loss: 0.9157 - val_accuracy: 0.4000 - 3s/epoch - 136ms/step\n",
            "Epoch 2/30\n",
            "25/25 - 1s - loss: 1.0333 - accuracy: 0.5100 - val_loss: 0.7911 - val_accuracy: 0.7000 - 1s/epoch - 41ms/step\n",
            "Epoch 3/30\n",
            "25/25 - 1s - loss: 0.9336 - accuracy: 0.6000 - val_loss: 0.6360 - val_accuracy: 0.8500 - 947ms/epoch - 38ms/step\n",
            "Epoch 4/30\n",
            "25/25 - 1s - loss: 0.9807 - accuracy: 0.5800 - val_loss: 0.8354 - val_accuracy: 0.8000 - 968ms/epoch - 39ms/step\n",
            "Epoch 5/30\n",
            "25/25 - 1s - loss: 0.9091 - accuracy: 0.6300 - val_loss: 0.6758 - val_accuracy: 0.6500 - 1s/epoch - 46ms/step\n",
            "Epoch 6/30\n",
            "25/25 - 2s - loss: 0.7414 - accuracy: 0.7100 - val_loss: 0.5486 - val_accuracy: 0.7500 - 2s/epoch - 73ms/step\n",
            "Epoch 7/30\n",
            "25/25 - 2s - loss: 0.7430 - accuracy: 0.6400 - val_loss: 0.4773 - val_accuracy: 0.9000 - 2s/epoch - 72ms/step\n",
            "Epoch 8/30\n",
            "25/25 - 1s - loss: 0.7692 - accuracy: 0.6600 - val_loss: 0.3492 - val_accuracy: 0.9000 - 960ms/epoch - 38ms/step\n",
            "Epoch 9/30\n",
            "25/25 - 1s - loss: 0.6322 - accuracy: 0.7600 - val_loss: 0.7755 - val_accuracy: 0.8000 - 949ms/epoch - 38ms/step\n",
            "Epoch 10/30\n",
            "25/25 - 1s - loss: 0.7336 - accuracy: 0.7000 - val_loss: 0.3997 - val_accuracy: 0.8000 - 985ms/epoch - 39ms/step\n",
            "Epoch 11/30\n",
            "25/25 - 1s - loss: 0.7186 - accuracy: 0.7000 - val_loss: 0.4062 - val_accuracy: 0.9000 - 978ms/epoch - 39ms/step\n",
            "Epoch 12/30\n",
            "25/25 - 1s - loss: 0.5905 - accuracy: 0.6900 - val_loss: 0.3222 - val_accuracy: 0.8500 - 948ms/epoch - 38ms/step\n",
            "Epoch 13/30\n",
            "25/25 - 1s - loss: 0.7311 - accuracy: 0.6700 - val_loss: 0.4226 - val_accuracy: 0.8500 - 968ms/epoch - 39ms/step\n",
            "Epoch 14/30\n",
            "25/25 - 1s - loss: 0.6994 - accuracy: 0.6600 - val_loss: 0.3506 - val_accuracy: 0.9500 - 949ms/epoch - 38ms/step\n",
            "Epoch 15/30\n",
            "25/25 - 1s - loss: 0.4633 - accuracy: 0.8100 - val_loss: 0.4160 - val_accuracy: 0.7500 - 941ms/epoch - 38ms/step\n",
            "Epoch 16/30\n",
            "25/25 - 1s - loss: 0.5693 - accuracy: 0.7800 - val_loss: 0.3211 - val_accuracy: 0.9500 - 975ms/epoch - 39ms/step\n",
            "Epoch 17/30\n",
            "25/25 - 1s - loss: 0.5999 - accuracy: 0.7800 - val_loss: 0.5561 - val_accuracy: 0.8000 - 1s/epoch - 53ms/step\n",
            "Epoch 18/30\n",
            "25/25 - 1s - loss: 0.7559 - accuracy: 0.6700 - val_loss: 0.5235 - val_accuracy: 0.8000 - 1s/epoch - 56ms/step\n",
            "Epoch 19/30\n",
            "25/25 - 1s - loss: 0.5223 - accuracy: 0.7600 - val_loss: 0.3114 - val_accuracy: 0.8500 - 986ms/epoch - 39ms/step\n",
            "Epoch 20/30\n",
            "25/25 - 1s - loss: 0.5524 - accuracy: 0.7600 - val_loss: 0.4662 - val_accuracy: 0.7000 - 949ms/epoch - 38ms/step\n",
            "Epoch 21/30\n",
            "25/25 - 1s - loss: 0.6408 - accuracy: 0.7000 - val_loss: 0.3390 - val_accuracy: 1.0000 - 974ms/epoch - 39ms/step\n",
            "Epoch 22/30\n",
            "25/25 - 1s - loss: 0.4872 - accuracy: 0.7500 - val_loss: 0.3863 - val_accuracy: 0.9000 - 968ms/epoch - 39ms/step\n",
            "Epoch 23/30\n",
            "25/25 - 1s - loss: 0.4487 - accuracy: 0.7500 - val_loss: 0.2742 - val_accuracy: 0.8000 - 982ms/epoch - 39ms/step\n",
            "Epoch 24/30\n",
            "25/25 - 1s - loss: 0.5030 - accuracy: 0.8400 - val_loss: 0.1645 - val_accuracy: 1.0000 - 920ms/epoch - 37ms/step\n",
            "Epoch 25/30\n",
            "25/25 - 1s - loss: 0.6243 - accuracy: 0.6900 - val_loss: 0.2457 - val_accuracy: 0.9000 - 953ms/epoch - 38ms/step\n",
            "Epoch 26/30\n",
            "25/25 - 1s - loss: 0.3988 - accuracy: 0.8600 - val_loss: 0.7037 - val_accuracy: 0.6000 - 936ms/epoch - 37ms/step\n",
            "Epoch 27/30\n",
            "25/25 - 1s - loss: 0.4869 - accuracy: 0.7900 - val_loss: 0.2516 - val_accuracy: 0.9000 - 1s/epoch - 41ms/step\n",
            "Epoch 28/30\n",
            "25/25 - 2s - loss: 0.4292 - accuracy: 0.8400 - val_loss: 0.1671 - val_accuracy: 0.9500 - 2s/epoch - 70ms/step\n",
            "Epoch 29/30\n",
            "25/25 - 2s - loss: 0.5762 - accuracy: 0.7900 - val_loss: 0.4248 - val_accuracy: 0.9000 - 2s/epoch - 67ms/step\n",
            "Epoch 30/30\n",
            "25/25 - 1s - loss: 0.3315 - accuracy: 0.9000 - val_loss: 0.1718 - val_accuracy: 0.9500 - 1s/epoch - 46ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GQOoO8GTHbOR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 614
        },
        "outputId": "6f42aa9c-e372-4990-8a25-54997b8474e8"
      },
      "source": [
        "import numpy as np\n",
        "from google.colab import files\n",
        "from tensorflow.keras.preprocessing import image\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.image as mpimg\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.image as mpimg\n",
        "%matplotlib inline\n",
        "\n",
        "uploaded = files.upload()\n",
        "\n",
        "for fn in uploaded.keys():\n",
        "\n",
        "  # predicting images\n",
        "  path = fn\n",
        "  img = image.load_img(path, target_size=(150,150))\n",
        "\n",
        "  imgplot = plt.imshow(img)\n",
        "  x = image.img_to_array(img)\n",
        "  x = np.expand_dims(x, axis=0)\n",
        "  images = np.vstack([x])\n",
        "\n",
        "  classes = model.predict(images, batch_size=10)\n",
        "\n",
        "  #membuat output\n",
        "  paper='[[1. 0. 0.]]'\n",
        "  scissors ='[[0. 1. 0.]]'\n",
        "  rock='[[0. 0. 1.]]'\n",
        "\n",
        "  #mengkonversi numpy array jadi str\n",
        "  result=np.array_str(classes)\n",
        "\n",
        "  print(\"Hasil Prediksi:\")\n",
        "  print(fn)\n",
        "  print(result)\n",
        "\n",
        "  if result==paper:\n",
        "   print('paper')\n",
        "  elif result==scissors:\n",
        "   print('scissors')\n",
        "  elif result==rock:\n",
        "    print('rock')\n",
        "  else:\n",
        "    print('Data tidak diketahui')"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-47f51ee6-eb52-401d-837e-166b72c60ebf\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-47f51ee6-eb52-401d-837e-166b72c60ebf\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving WhatsApp Image 2023-11-22 at 01.02.18.jpeg to WhatsApp Image 2023-11-22 at 01.02.18.jpeg\n",
            "1/1 [==============================] - 0s 238ms/step\n",
            "Hasil Prediksi:\n",
            "WhatsApp Image 2023-11-22 at 01.02.18.jpeg\n",
            "[[1. 0. 0.]]\n",
            "paper\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BlFz4gT1aQfM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f06e053a-3c96-453c-a96d-3dd67e5e4d77"
      },
      "source": [
        "classes"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1., 0., 0.]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(train_generator.class_indices)"
      ],
      "metadata": {
        "id": "FEfEsZLW5vbO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2558bbe2-f8cd-4d77-9c12-d386ef1caf63"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'paper': 0, 'rock': 1, 'scissors': 2}\n"
          ]
        }
      ]
    }
  ]
}
